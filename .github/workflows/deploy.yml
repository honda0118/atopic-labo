name: deploy stg

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    # 作業ディレクトリを設定する
    defaults:
      run: 
        working-directory: src
    # データベースコンテナを設定する。
    # ランナーは自動的にDockerネットワークを作成し、サービスコンテナのライフサイクルを管理する。
    services:
      mysql:
        image: mysql:8.0.19
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10
        env:
          MYSQL_ROOT_PASSWORD: pass
          MYSQL_DATABASE: test

    steps:
      # php
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - uses: actions/checkout@v3
      - name: copy .env
        run: php -r "copy('.env.testing', '.env');"
      - name: cache vendor
        id: cache-vendor
        uses: actions/cache@v3
        with:
          path: ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: composer install
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: generate key
        run: php artisan key:generate
      - name: directory permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: migrate
        run: php artisan migrate --force

      # node
      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: install node modules
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install
      - name: build
        run: npm run build 

      # test
      - name: execute tests via PHPUnit
        run: php artisan test
      - name: execute tests via Vitest
        run: LARAVEL_BYPASS_ENV_CHECK=1 npx vitest run

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: upload file
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          USER_NAME: ${{ secrets.USER_NAME }}
          HOST_NAME: ${{ secrets.HOST_NAME }}
        # ・"$PRIVATE_KEY"
        # パス展開されないようにダブルクォーテーションを付ける
        # ・StrictHostKeyChecking=no
        # SSH接続時に警告メッセージを表示しない
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} \
          cd project/atopic-labo && \
          git pull git@github.com:honda0118/atopic-labo.git && \
          docker compose exec app npm run build
